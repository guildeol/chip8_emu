#include <cstring>
#include <span>

#include "cpu_memory.h"

CpuMemory::CpuMemory()
{
  // The CHIP-8 emulator should have a built-in font, with sprite data representing the hexadecimal
  // numbers from 0 through F. Each font character should be 4 pixels wide by 5 pixels tall.
  // These font sprites are drawn just like regular sprites.
  uint8_t builtin_font[] =
  {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
  };

  memset(this->bank.data(), 0x00, sizeof(this->bank));
  memcpy(this->font.start, builtin_font, sizeof(builtin_font));
  this->font.size = sizeof(builtin_font);
}

std::vector<std::byte> CpuMemory::getBytes(size_t offset, size_t count)
{
  if (offset > this->bank.size())
    throw std::out_of_range("Offset is out of range!");

  std::vector<std::byte> bytes(count);

  bytes.assign(begin(this->bank) + offset, begin(this->bank) + offset + count);

  return bytes;
}
